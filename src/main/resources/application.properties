# H2

#spring.h2.console.settings.web-allow-others=true

#spring.h2.console.enabled=true
#spring.h2.console.path=/h2
#indicará o path para você acessar a interface do h2, em geral, vá ao browser e coloque localhost:8080/h2 com 8080 ou sua porta

#deixa que hibernate gerencia a criação das bases de dados - permite atualizações nas bases, mas nunca apaga tabelas ou colunas que não estejam em uso pela aplicação - existem outras configurações - essa é só simples e segura na fase de desenvolvimento!
spring.jpa.hibernate.ddl-auto=update

# Datasource
spring.datasource.url=jdbc:postgresql://salt.db.elephantsql.com:5432/ufzceyxv?user=ufzceyxv&password=JYQEGIPXuNWCME6COIzsBzyHMftFPnQl&sslmode=require
#spring.datasource.username=ufzceyxv
#spring.datasource.password=JYQEGIPXuNWCME6COIzsBzyHMftFPnQl

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
 
spring.datasource.driver-class-name = org.postgresql.Driver

#spring.datasource.driver-class-name=org.h2.Driver

server.servlet.context-path=/v1/api
#diz ao spring que coloque /api antes de qualquer url, ou seja, se voce quiser utilizar as rotas /products, precisará adicionar /api =>  /v1/api/products e assim por diante

#spring-boot-starter-mail properties
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=projsoftUFCG@gmail.com
spring.mail.password=projetoufcg
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.enable=false
spring.mail.test-connection=true
